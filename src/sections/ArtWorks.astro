<section
  id="threejs"
  class="fixed top-0 left-0 h-full w-full animate-blurred-fade-in animate-duration-600 delay-500"
>
</section>

<script>
  // Importar las librerías necesarias de Three.js
  import * as THREE from "three";

  const $threejs = document.getElementById("threejs");

  // Crear escena
  var scene = new THREE.Scene();

  // Crear cámara
  var camera = new THREE.PerspectiveCamera(
    50,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 15;

  // Crear renderizador
  var renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0xfff, 0); // fondo transparente
  $threejs?.appendChild(renderer.domElement);

  // Crear geometría para los cubos
  var geometry = new THREE.BoxGeometry(1, 1.3, 0.1);

  //Crear loader para las texturas
  var loader = new THREE.TextureLoader();

  // cargar una imagen y crear la textura
  var texture1 = loader.load(
    "https://cdn.pixabay.com/photo/2017/08/30/12/45/girl-2696947_960_720.jpg"
  );
  var texture2 = loader.load(
    "https://cdn.pixabay.com/photo/2024/05/30/10/38/woman-8798294_1280.jpg"
  );
  var texture3 = loader.load(
    "https://cdn.pixabay.com/photo/2024/05/29/04/25/woman-8795132_1280.jpg"
  );
  var texture4 = loader.load(
    "https://cdn.pixabay.com/photo/2024/05/31/06/43/apple-8799888_1280.jpg"
  );
  var texture5 = loader.load(
    "https://cdn.pixabay.com/photo/2024/05/29/04/34/woman-8795178_1280.jpg"
  );
  var texture6 = loader.load(
    "https://cdn.pixabay.com/photo/2024/05/29/04/32/ai-generated-8795165_1280.jpg"
  );

  // Crear material para los cubos
  var materials = [
    new THREE.MeshBasicMaterial({ map: texture1 }),
    new THREE.MeshBasicMaterial({ map: texture2 }),
    new THREE.MeshBasicMaterial({ map: texture3 }),
    new THREE.MeshBasicMaterial({ map: texture4 }),
    new THREE.MeshBasicMaterial({ map: texture5 }),
    new THREE.MeshBasicMaterial({ map: texture6 }),
  ];

  // Crear cubos y añadirlos a la escena
  var radius = 5; // radio del anillo
  var cubeScale = 2.5; // escala inicial de los cubos

  for (var i = 0; i < 6; i++) {
    var cube = new THREE.Mesh(geometry, materials[i]);

    // Calcular la posición en el anillo usando coordenadas polares
    var angle = (i * Math.PI) / 2; // dividir 2*PI en 6 partes
    cube.position.x = radius * Math.cos(angle);
    cube.position.z = radius * Math.sin(angle);

    // Ajustar la escala en función de la posición en el eje z
    cube.scale.set(
      cubeScale + cube.position.z / radius,
      cubeScale + cube.position.z / radius,
      cubeScale + cube.position.z / radius
    );

    scene.add(cube);

    // Crear bordes para la cara frontal del cubo
    // wireframe
    var geo = new THREE.EdgesGeometry(new THREE.BoxGeometry(1, 1.3, 0));
    var mat = new THREE.LineBasicMaterial({ color: 0x454545 });
    mat.linewidth = 4; // default is 1
    var wireframe = new THREE.LineSegments(geo, mat);
    cube.add(wireframe);
  }

  // Variables para controlar la rotación
  var rotationSpeed = 0.001; // velocidad de rotación
  var angleOffset = 0; // ángulo inicial

  // Función de animación
  function animate() {
    requestAnimationFrame(animate);

    // Actualizar la posición de los cubos
    for (var i = 0; i < scene.children.length; i++) {
      var cube = scene.children[i];

      // Calcular el nuevo ángulo
      var angle = (i * Math.PI) / 2.5 + angleOffset;

      // Actualizar la posición del cubo
      cube.position.x = radius * Math.cos(angle);
      cube.position.z = radius * Math.sin(angle);
      cube.position.y = Math.sin(angle) * -1.5;

      // Ajustar la escala en función de la posición en el eje z
      cube.scale.set(
        cubeScale + cube.position.z / radius,
        cubeScale + cube.position.z / radius,
        cubeScale + cube.position.z / radius
      );
    }

    // Incrementar el ángulo para la próxima iteración
    angleOffset -= rotationSpeed;

    renderer.render(scene, camera);
  }
  animate();
</script>
